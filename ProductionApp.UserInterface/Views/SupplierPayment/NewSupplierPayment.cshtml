@using ProductionApp.UserInterface.App_Start
@model ProductionApp.UserInterface.Models.SupplierPaymentViewModel
@using ProductionApp.UserInterface.Models

@{
    if (Model.IsUpdate)
    {
        ViewBag.Title = "Edit Supplier Payment";
    }
    else
    {
        ViewBag.Title = "New Supplier Payment";
    }
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatable")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatableButtons")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatableSelect")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/css/Select2")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/css/Selectmin")
}
<div style="width:100%;">
    <ol class="breadcrumb">
        <li><a href="@Url.Action("NewSupplierPayment", "SupplierPayment", new { Code = "ACC" })"><i class="fa fa-cogs"></i> Supplier Payment</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>
</div>


@* THE DOCTYPE VARIES FOR EACH PAGE MAKE SURE TO ADD ApprovalHistory JS FROM SCRIPT BUNDLE IN THE SAME PAGE*@
@Html.Action("AboutApprovalHistory", "DocumentApproval", new { id = Model.ID, docType = "SPAY" })


<section class="content">
    <div class="row" id="OverlayHeader">
        <div class="col-md-6" style="text-align:left">
            <span id="lblReturnSlipNo" class="SCHeader">Supplier Payment# : New</span>
        </div>
        <div class="col-md-6" id="divbuttonPatchSupplierPayment" style="min-height:25px;">
            @{
                var data = new { actionType = "Add" };
                @Html.Action("ChangeButtonStyle", "SupplierPayment", data);
            }
        </div>
    </div>
    <div class="row tableContainer">
        <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> General</div>
        @using (Ajax.BeginForm("InsertUpdateSupplierPayment", "SupplierPayment", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessSupplierPayment", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", @id = "SupplierPaymentForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
            @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "", @value = Guid.Empty })
            @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
            @Html.HiddenFor(model => model.LatestApprovalStatus)
            @Html.HiddenFor(model => model.LatestApprovalID)
            @Html.HiddenFor(model => model.AdvanceAmount, htmlAttributes: new { @class = "" })

            <div class="col-md-12">
                <div class="form-group col-md-8">
                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.EntryNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.EntryNo, new { htmlAttributes = new { @class = "form-control HeaderBox", @disabled = "disabled", @placeholder = "Auto Generated" } })
                        </div>
                    </div>


                    <div class="col-md-12"></div>
                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SupplierID, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12" id="divSupplierDropdown">
                            @Html.Action("SupplierDropdown", "Supplier", new { required = "required" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.PaymentDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.PaymentDateFormatted, new { htmlAttributes = new { @class = "form-control HeaderBox datepicker" } })
                            @Html.ValidationMessageFor(model => model.PaymentDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-12"></div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @{
                                List<SelectListItem> TypeList = new List<SelectListItem>();
                                TypeList.Add(new SelectListItem
                                { Text = "Payment", Value = "P" });
                                //TypeList.Add(new SelectListItem
                                //{ Text = "Credit Adujustment", Value = "C" });
                            }
                            @Html.DropDownListFor(model => model.Type, TypeList, new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;width:100 %", onchange = "TypeOnChange();" })
                        </div>
                    </div>

                    <div class="form-group col-md-6" id="ddlCreditDiv" style="visibility:hidden">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.CreditID, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.CreditID, new SelectList(Enumerable.Empty<SelectListItem>(), "CreditID", "CreditName"), "-- Select Credit --", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;width:100%;", @id = "CreditID", onchange = "ddlCreditOnChange()" })
                        </div>
                    </div>
                    <div class="col-md-12"></div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.PaymentMode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @{
                                List<SelectListItem> PaymentType = new List<SelectListItem>();
                                PaymentType.Add(new SelectListItem
                                { Text = "CASH", Value = "CASH" });
                                PaymentType.Add(new SelectListItem
                                { Text = "CHEQUE", Value = "CHEQUE" });
                                PaymentType.Add(new SelectListItem
                                { Text = "ONLINE", Value = "ONLINE" });
                            }
                            @Html.DropDownListFor(model => model.PaymentMode, PaymentType, "--Select Payment Mode--", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;width:100%;", onchange = "PaymentModeChanged();" })
                            @Html.ValidationMessageFor(model => model.PaymentMode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ChequeDate, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ChequeDateFormatted, new { htmlAttributes = new { @class = "form-control HeaderBox datepicker" } })
                            @Html.ValidationMessageFor(model => model.ChequeDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-12"></div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReferenceBank, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ReferenceBank, new { htmlAttributes = new { @class = "form-control HeaderBox", rows = "8" } })
                            @Html.ValidationMessageFor(model => model.ReferenceBank, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.Action("BankDropdown", "Bank", new { required = "required" })
                        </div>
                    </div>
                    <div class="col-md-12"></div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.PaymentRef, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.PaymentRef, new { htmlAttributes = new { @class = "form-control HeaderBox", rows = "8" } })
                            @Html.ValidationMessageFor(model => model.PaymentRef, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-12"></div>

                </div>
                <div class="form-group col-md-4">
                    <div class="col-md-12">
                        <div class="col-md-12  ">&nbsp;</div>
                        <div class="col-md-12  ">&nbsp;</div>
                    </div>
                    <div class="form-group col-md-12 box-header figuresummary rounded">

                        <div class="form-group col-md-12 ">
                            <div class="rightAmtCaption" style="margin-right:0% !important">Outstanding  Amount</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay" id="invoicedAmt">₹ 0.00</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption" id="lblpaidAmt">Amount Received</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay" id="paidAmt">₹ 0.00</div>
                        </div>

                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption" id="lblAdvAmt">Advance Amount</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay" id="advAmt">₹ 0.00</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Approval Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay" id="lblApprovalStatus">N/A</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> Outstanding Invoices</div>

            <div class="col-md-10"></div>
            <div class="form-group col-md-2 pull-right">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.TotalPaidAmt, htmlAttributes: new { @class = "control-label lblrequired", @id = "lblTotalAmtRecdCptn" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.TotalPaidAmt, new { htmlAttributes = new { @class = "form-control HeaderBox selecttext Amount", style = "text-align: right", onchange = "AmountChanged();", onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.TotalPaidAmt, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-12">
                <table id="tblOutStandingDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" width="100%">
                    <thead>
                        <tr class="text-center TableHead">
                            <th>ID</th>
                            <th></th>
                            <th>Description</th>
                            <th>Payment Due Date</th>
                            <th>Invoiced (₹)</th>
                            <th>Paid (₹)</th>
                            <th>Balance Due (₹)</th>
                            <th>Current Payment (₹)</th>
                            <th>PaymentDetailID</th>
                        </tr>
                    </thead>
                </table>

            </div>


            <div class="col-md-8"></div>
            <div class="col-md-4">
                <table class="table table-striped table-bordered table-hover customgrd dataTable no-footer">
                    <tbody>
                        <tr>
                            <td style="width:50%; text-align: right">
                                @Html.Label("Total Amount Received", htmlAttributes: new { @class = "control-label ", @id = "lblTotalRecdAmtCptn" })
                            </td>
                            <td style="width:50%; text-align: right">
                                @Html.Label("0", htmlAttributes: new { @class = "control-label ", @id = "lblTotalRecdAmt" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:50%; text-align: right">
                                @Html.Label("Payment Applied", htmlAttributes: new { @class = "control-label ", @id = "lblPaymentAppliedCptn" })
                            </td>
                            <td style="width:50%; text-align: right">
                                @Html.Label("0", htmlAttributes: new { @class = "control-label ", @id = "lblPaymentApplied" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:50%; text-align: right">
                                @Html.Label("Credit Received", htmlAttributes: new { @class = "control-label ", @id = "lblCreditCptn" })
                            </td>
                            <td style="width:50%; text-align: right">
                                @Html.Label("0", htmlAttributes: new { @class = "control-label ", @id = "lblCredit" })
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div> 

            <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> General Notes</div>
            <div class="col-md-12">
                <div class="form-group col-md-8">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, new { @class = "form-control HeaderBox textareafix", rows = "8" })
                    </div>
                </div>
            </div>

            <div>
                @Html.Partial("_Fileupload")
            </div>

            <div class="form-group" hidden="hidden">
                <div class="col-md-offset-2 col-md-10">
                    @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
                    <input id="btnSave" type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
                                }
        <div class="col-md-12  ">&nbsp;</div>
        <div class="col-md-12  ">&nbsp;</div>
    </div>
</section>

<!-- Modal Send Approval Modal -->
<div class="modal fade bs-example-modal-lg" id="SendApprovalModal" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document" style="min-width:500px !important;">
        <div class="modal-content" style="margin-top:4%;">
            <div class="modal-header" style="background-image: url('');background-repeat: repeat;height: 40px;padding: 3px;border-bottom:2px solid rgb(91, 192, 222)!important;">
                <div class="container-fluid" style="padding-right: 0px;">
                    <div class="col-md-9">
                        <div class="col-md-12 modelIcon">
                            <h3 class="modal-title" id="modelContextLabel">Send Approval Details</h3>
                        </div>
                    </div>
                    <div class="col-md-3" style="padding-right: 4px;">
                        <a class="close" data-dismiss="modal" aria-label="Close"><i style="font-size: 33px;" class="fa fa-times-circle" aria-hidden="true"></i></a>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    @{
                        DocumentApprovalViewModel documentApprovalVM = new DocumentApprovalViewModel();
                        documentApprovalVM.DocumentType = "SPAY";
                        @Html.Action("GetApprovers", "DocumentApproval", documentApprovalVM);
                    }
                </div>
            </div>
            <div class="modal-footer" style="height: 50px;padding: 7px;">
                <a class="btn btn-primary" onclick="SendForApproval('SPAY')"><i class="glyphicon glyphicon-floppy-disk"></i> Send For Approval</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatable")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatableSelect")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatableButtons")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jsZip")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/select2")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/selectmin")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/UserJs/SupplierPayment/NewSupplierPayment")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jqueryunobtrusiveajaxvalidate")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/UserJs/DocumentApproval/ApprovalHistory")
}




