@using ProductionApp.UserInterface.App_Start
@model ProductionApp.UserInterface.Models.OtherExpenseViewModel
@using ProductionApp.UserInterface.Models
@{
    if (Model.IsUpdate)
    {
        ViewBag.Title = "Edit OtherExpense";
    }
    else
    {
        ViewBag.Title = "New OtherExpense";
    }
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatable")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatableButtons")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/css/select2")
}
<div style="width:100%;">
    <ol class="breadcrumb">
        <li><a href="@Url.Action("NewOtherExpense", "OtherExpense", new { Code = "ACC" })"><i class="fa fa-cogs"></i> Other Expense</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>
</div>
<section class="content">
    <div class="row" id="OverlayHeader">
        <div class="col-md-6" style="text-align:left">
            <span id="lblOtherExpenseEntryNo" class="SCHeader">Other Expense# : New</span>
        </div>
        <div class="col-md-6" id="divbuttonPatchOtherExpense" style="min-height:25px;">
            @{
                var data = new { actionType = "Add" };
                @Html.Action("ChangeButtonStyle", "OtherExpense", data);
            }
        </div>
    </div>
    <div class="row tableContainer">
        <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> General</div>
@using (Ajax.BeginForm("InsertUpdateOtherExpense", "OtherExpense", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessOtherExpense", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", @id = "OtherExpenseForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "", @value = Guid.Empty })
    @Html.HiddenFor(model => model.DepositWithdrawalID, htmlAttributes: new { @class = "" })
    @Html.Hidden("hdnAmountReversal", "", htmlAttributes: new { @class = "" });
    @Html.Hidden("hdnReducibleAmt", "", htmlAttributes: new { @class = "" });
    @Html.HiddenFor(model => model.LatestApprovalStatus)
    @Html.HiddenFor(model => model.LatestApprovalID)
    <div class="col-md-12">
        <div class="form-group col-md-8">
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.EntryNo, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.EntryNo, new { htmlAttributes = new { @class = "form-control HeaderBox", @disabled = "disabled", @placeholder = "Auto Generated" } })
                </div>
            </div>
            <div class="col-md-12"></div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ExpenseDate, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ExpenseDateFormatted, new { htmlAttributes = new { @class = "form-control HeaderBox datepicker" } })
                    @Html.ValidationMessageFor(model => model.ExpenseDateFormatted, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.AccountCode, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @Html.HiddenFor(model => model.AccountCode, htmlAttributes: new { @id = "hdnChartOfAccountCode" })
                    @Html.Action("ChartOfAccountDropdown", "ChartOfAccount", new { required = "required", type= "EXP" })
                </div>
            </div>
            <div class="col-md-12"></div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.AccountSubHead, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.AccountSubHead, Model.SelectList, "-- Select SubType --", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;width:100%;",@disabled="disabled" })
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.IsReverse, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @{
                        List<SelectListItem> TypeList = new List<SelectListItem>();
                        TypeList.Add(new SelectListItem
                        { Text = "Regular", Value = "false" });
                        TypeList.Add(new SelectListItem
                        { Text = "Reversal", Value = "true" });
                    }
                    @Html.DropDownListFor(model => model.IsReverse, TypeList, new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;width:100 %", onchange = "IsReverseOnchange();" })
                </div>
            </div>
            <div class="col-md-12"></div>
        </div>
        <div class="form-group col-md-4">
            <div class="col-md-12">
                <div class="col-md-12  ">&nbsp;</div>
                <div class="col-md-12  ">&nbsp;</div>
            </div>
            <div class="form-group col-md-12 box-header figuresummary rounded">
                <div class="form-group col-md-12">
                    <div class="rightAmtCaption">Approval Status</div>
                </div>
                <div class="form-group col-md-12">
                    <div class="lblStatusDisplay" id="lblApprovalStatus">N/A</div>
                </div>
            </div>
            <div id="ReversalRefDiv"  style="display:none">
                <div class="col-md-12 no-left-padding">
                    @Html.LabelFor(model => model.ReversalRef, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-11 no-left-padding">
                    @{
                        @Html.EditorFor(model => model.ReversalRef, new { htmlAttributes = new { @class = "form-control", @onkeyup = "ClearReversalRef()" } })
                        @Html.ValidationMessageFor(model => model.ReversalRef, "", new { @class = "text-danger" })
                    }

                </div>
                <span id="btnAddRef" title="Search Reference"><img src="~/Content/images/searchdefault.png" style="width:20px;cursor:pointer;" onclick="SearchReference();" /></span>
            </div>

            

        </div>

        <div class="col-md-12">
            <div id="RefSearchDiv" hidden="hidden" class="addEmp">
                <div class="col-md-11"></div>
                <div class="col-md-1">
                    <a class="close" onclick="CancelSearch();" style="padding-top:5px" aria-label="Close"><i style="font-size: 22px;" class="fa fa-times-circle" aria-hidden="true"></i></a>
                </div>
                <div class="col-md-12">
                    <div id="ReFSearchMsg" class="col-md-12" style="color:red" hidden="hidden">* Select AccountHead/Subtype/Empoyee/other as applicable</div>
                </div>
                <div class="col-md-12">
                    <h5 style="text-align:left;font-size:16px; padding-left:35px;position:absolute;padding-top: 20px;">Select Reversal Referances</h5>
                    <table id="RefSearchTable" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" width="100%">
                        <thead>
                            <tr class="text-center TableHead">
                                <th>Entry. No</th>
                                <th>Description</th>
                                <th>Expense Date</th>
                                <th>Amount</th>
                                <th>Reversible Amount</th>
                                <th>...</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>

    </div>
    <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> Payment Details</div>
    <div class="col-md-12">
        <div class="form-group col-md-8">
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.PaymentMode, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @{
                    List<SelectListItem> PaymentType = new List<SelectListItem>();
                    PaymentType.Add(new SelectListItem
                    { Text = "CASH", Value = "CASH" });
                    PaymentType.Add(new SelectListItem
                    { Text = "CHEQUE", Value = "CHEQUE" });
                    PaymentType.Add(new SelectListItem
                    { Text = "ONLINE", Value = "ONLINE" });
                    }
                    @Html.DropDownListFor(model => model.PaymentMode, PaymentType, "--Select Payment Mode--", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;width:100%;", onchange = "PaymentModeChanged();" })
                    @Html.ValidationMessageFor(model => model.PaymentMode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12" id="divBankDropdown">
                    @Html.Action("BankDropdown", "Bank", new { required = "required" })
                </div>
                <div class="col-md-12">
                    @Html.HiddenFor(model => model.BankCode, new { htmlAttributes = new { @id = "hdnBankCode" } })
                </div>
            </div>
            
            <div class="col-md-12"></div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ChequeDate, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ChequeDateFormatted, new { htmlAttributes = new { @class = "form-control HeaderBox datepicker" } })
                    @Html.ValidationMessageFor(model => model.ChequeDateFormatted, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ChequeClearDate, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ChequeClearDateFormatted, new { htmlAttributes = new { @class = "form-control HeaderBox datepicker" } })
                    @Html.ValidationMessageFor(model => model.ChequeClearDateFormatted, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="col-md-12"></div>
            <div class="form-group col-md-6">
                @*<div class="col-md-12">*@
                    @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label lblrequired col-md-2" })
                    
                @*</div>*@
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control HeaderBox selecttext  Amount", style = "text-align: right", onkeypress = "return isNumber(event)", onchange = "CheckReversableAmount()" } })
                    <span id="ReFAmountMsg"  style="color:red" hidden="hidden"></span>
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ExpneseRef, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ExpneseRef, new { htmlAttributes = new { @class = "form-control HeaderBox", rows = "8" } })
                    <span id="PayReFAmountMsg" class="text-danger" hidden="hidden"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> General Notes</div>
    <div class="col-md-12">
        <div class="form-group col-md-7">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.Description,5,80, new  { @class = "form-control HeaderBox" } )
            </div>
        </div>
        <div class="col-md-12  ">&nbsp;</div>
        <div class="col-md-12  ">&nbsp;</div>
        <div class="col-md-12  ">&nbsp;</div>
        <div class="col-md-12  ">&nbsp;</div>
    </div>
    <div class="form-group" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnSave" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
                        }
    </div>
</section>
<!-- Modal Send Approval Modal -->
<div class="modal fade bs-example-modal-lg" id="SendApprovalModal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document" style="min-width:500px !important;">
        <div class="modal-content" style="margin-top:4%;">
            <div class="modal-header" style="background-image: url('');background-repeat: repeat;height: 40px;padding: 3px;border-bottom:2px solid rgb(91, 192, 222)!important;">
                <div class="container-fluid" style="padding-right: 0px;">
                    <div class="col-md-9">
                        <div class="col-md-12 modelIcon">
                            <h3 class="modal-title" id="modelContextLabel">Send Approval Details</h3>
                        </div>
                    </div>
                    <div class="col-md-3" style="padding-right: 4px;">
                        <a class="close" data-dismiss="modal" aria-label="Close"><i style="font-size: 33px;" class="fa fa-times-circle" aria-hidden="true"></i></a>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    @{
                        DocumentApprovalViewModel documentApprovalVM = new DocumentApprovalViewModel();
                        documentApprovalVM.DocumentType = "OE";
                        @Html.Action("GetApprovers", "DocumentApproval", documentApprovalVM);
                    }

                </div>
            </div>
            <div class="modal-footer" style="height: 50px;padding: 7px;">
                <a class="btn btn-info" onclick="SendForApproval('OE')"><i class="glyphicon glyphicon-floppy-disk"></i> Send For Approval</a>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatable")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatableButtons")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jsZip")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/select2")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/UserJs/OtherExpense/NewOtherExpense")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jqueryunobtrusiveajaxvalidate")
}


