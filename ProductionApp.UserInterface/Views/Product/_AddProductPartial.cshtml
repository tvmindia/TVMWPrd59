@model ProductionApp.UserInterface.Models.ProductViewModel

@using (Ajax.BeginForm("InsertUpdateProduct", "Product", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProduct", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormProduct" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
        @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @{Html.RenderAction("UnitDropdown", "Unit", Model.Unit);}
                        @*@Html.Action("UnitDropdown", "Unit")
                    @Html.ValidationMessageFor(model => model.UnitCode, "", new { @class = "text-danger" })*@
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12">
            <div class="col-md-12">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.CurrentStock, htmlAttributes: new { @class = "control-label " })
                </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.CurrentStock, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.CurrentStock, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group ">
            <div class="col-md-12">
                <input type="submit" value="Save Changes" id="btnSaveMaster" class="btn btn-info" style="margin-left:5%" />
                <img src="~/Content/images/MasterLoading.gif" id="imgMasterLoading" style="display:none" />
            </div>
        </div>
    </div>
}
        <script>
            $(document).ready(function () {
                $.validator.unobtrusive.parse("#FormProduct");
            });
        </script>
