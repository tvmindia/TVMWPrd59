@using ProductionApp.UserInterface.App_Start
@model ProductionApp.UserInterface.Models.MaterialReturnFromProductionViewModel
@{
    if (Model.IsUpdate)
    {
        ViewBag.Title = "Edit Material Recieve";
    }
    else
    {
        ViewBag.Title = "Add Material Recieve";
    }
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatable")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatableButtons")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/css/Select2")
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/css/Selectmin")
}
<div style="width:100%;">
    <ol class="breadcrumb">
        <li><a href="@Url.Action("NewRecieveFromProduction", "MaterialReturnFromProduction", new { Code = "STR" })"><i class="fa fa-cogs"></i> Receive From Production</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>
</div>

<section class="content">
    <div class="row" id="OverlayHeader">
        <div class="col-md-6" style="text-align:left">
            <span id="lblReturnNo" class="SCHeader">Receive From Production# : New</span>
        </div>
        <div class="col-md-6" id="divbuttonPatchReturnFromProduction" style="min-height:25px;">
            @{
                var data = new { actionType = "Add" };
                @Html.Action("ChangeButtonStyle", "MaterialReturnFromProduction", data);
            }
        </div>
    </div>

    <div class="row tableContainer">
        <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> General</div>
        @using (Ajax.BeginForm("InsertUpdateReturnFromProduction", "MaterialReturnFromProduction", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessReturnFromProduction", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", @id = "AddReturnFromProductionForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
            @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "", @value = Guid.Empty })

            <div class="col-md-12">
                <div class="form-group col-md-8">
                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReturnNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ReturnNo, new { htmlAttributes = new { @class = "form-control HeaderBox", @disabled = "disabled", @placeholder = "Auto Generated" } })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReturnDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ReturnDateFormatted, new { htmlAttributes = new { @class = "form-control HeaderBox datepicker" } })
                            @Html.ValidationMessageFor(model => model.ReturnDateFormatted, "", new { @class = "text-danger" })
                            
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReceivedBy, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12" id="divReceivedByDropdown">
                            @*@Html.DropDownListFor(model => model.ReceivedBy, Model.Employee.SelectList, "--Select Employee--", new { @class = "form-control BlockEnter", @Style = "width:100%" })*@
                            @Html.Action("ReceivedByDropdown", "Employee", new { required = "required" })
                            @Html.ValidationMessageFor(model => model.ReceivedBy, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReturnBy, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12" id="divReturnByDropdown">
                            @*@Html.DropDownListFor(model => model.ReturnBy, Model.Employee.SelectList, "--Select Employee--", new { @class = "form-control BlockEnter", @style = "width:100%" })*@
                            @Html.Action("ReturnByDropdown", "Employee", new { required = "required" })
                            @Html.ValidationMessageFor(model => model.ReturnBy, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                @*<div class="form-group col-md-4">
                </div>*@
            </div>

            <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> Item Details</div>

                <div class="col-md-12" style="padding-bottom:3px">
                    <div class="col-md-10">
                    </div>
                    <div class="col-md-2">
                        <a class="btn btn-openid" onclick="ShowReturnFromProductionDetailsModal()" id="btnAddIssueToProductionItems" style="color:white;font-weight:bold;float:right"><i class="glyphicon glyphicon-plus"></i> Add Item </a>
                    </div>
                </div>
                <div class="col-md-12">
                    <table id="tblReturnFromProductionDetail" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%">
                        <thead>
                            <tr class="text-center TableHead">
                                <th>ID</th>
                                <th>MaterialID</th>
                                <th>Sl.No</th>
                                <th>Code</th>
                                <th>Material Description</th>
                                <th>Unit</th>
                                <th>Quantity</th>
                                <th>...</th>
                            </tr>
                        </thead>
                    </table>
                </div>

                <div class="col-md-12 headSeperator"><i class="fa fa-th ig-aqua" aria-hidden="true"></i> General Notes</div>

                <div class="col-md-8">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.GeneralNotes, new { htmlAttributes = new { @class = "form-control HeaderBox", rows = "8" } })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group" hidden="hidden">
                    <div class="col-md-offset-2 col-md-10">
                        @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
                        <input id="btnSave" type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
        }
        <div class="col-md-12  ">&nbsp;</div>
        <div class="col-md-12  ">&nbsp;</div>
    </div>

</section>

<!-- Modal Edit Add issue to production Details Modal -->
<div class="modal fade bs-example-modal-lg" id="AddReturnFromProductionItemModal"  role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document" style="min-width:900px !important;">
        <div class="modal-content" style="margin-top:4%;">
            <div class="modal-header" style="background-image: url('');background-repeat: repeat;height: 36px;padding: 3px;border-bottom:2px solid rgb(91, 192, 222)!important;">
                <div class="container-fluid" style="padding-right: 0px;">
                    <div class="col-md-9">
                        <div class="col-md-12 modelIcon">
                            <h3 class="modal-title SCHeader" id="modelContextLabel">Add Materials</h3>
                        </div>
                    </div>
                    <div class="col-md-3" style="padding-right: 4px;">
                        <a class="close" data-dismiss="modal" aria-label="Close"><i style="font-size: 33px;" class="fa fa-times-circle" aria-hidden="true"></i></a>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="col-md-12">
                        <div class="form-group col-md-12">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MaterialReturnFromProductionDetail.MaterialID, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-10">
                                <div id="divRawMaterialDropdown">
                                    @{Html.RenderAction("MaterialDropdown", "Material", Model.MaterialReturnFromProductionDetail.Material); }
                                </div>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-1"></div>
                        </div>
                    </div>
                    <div class="col-md-12 headSeperator" style="width:100% !important;margin-left:0% !important"></div>

                    <div class="form-group col-md-12">
                        <div class="col-md-6">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MaterialReturnFromProductionDetail.Material.MaterialCode, htmlAttributes: new { @class = "control-label " })
                            </div>

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MaterialReturnFromProductionDetail.Material.MaterialCode, new { htmlAttributes = new { @class = "form-control HeaderBox", @disabled = "disabled" } })
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-1"></div>

                        </div>

                        <div class="col-md-6">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MaterialReturnFromProductionDetail.MaterialDesc, htmlAttributes: new { @class = "control-label " })
                            </div>

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MaterialReturnFromProductionDetail.MaterialDesc, new { htmlAttributes = new { @class = "form-control HeaderBox" } })
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-1"></div>

                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        <div class="col-md-6">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MaterialReturnFromProductionDetail.UnitCode, htmlAttributes: new { @class = "control-label " })
                            </div>

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MaterialReturnFromProductionDetail.UnitCode, new { htmlAttributes = new { @class = "form-control HeaderBox", @disabled = "disabled" } })
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-1"></div>

                        </div>

                        <div class="col-md-6">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MaterialReturnFromProductionDetail.Qty, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MaterialReturnFromProductionDetail.Qty, new { htmlAttributes = new { @class = "form-control HeaderBox Amount", onkeypress = "return isNumber(event)" } })
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-1"></div>

                        </div>
                    </div>

                </div>
            </div>
            <div class="modal-footer" style="height: 50px;padding: 7px;">
                <a class="btn btn-info" onclick="AddReturnFromProductionItem()"><i class="glyphicon glyphicon-floppy-disk"></i> Add</a>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatable")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jsZip")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatableButtons")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/select2")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/selectmin")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/UserJs/MaterialReturnFromProductionJS/NewRecieveFromProduction")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jqueryunobtrusiveajaxvalidate")
}

